name: code scan

on:
  workflow_call:
    inputs:
      SCAN_TYPE:
        required: true
        type: string 
      SCAN_INCLUDE:
        required: true
        type: string       
      SCAN_EXCLUDE:
        required: false
        type: string            
         
jobs:
  Code-Scan:
    runs-on: ubuntu-latest
      
    steps:
    - uses: actions/checkout@v2
    
    - name: IaC KICS scan
      if: contains(inputs.SCAN_TYPE, 'IaC')
      working-directory: .
      run: |
        docker run -v $PWD:/path checkmarx/kics scan -p "/path" -o "/path" --path ${{inputs.SCAN_INCLUDE}} --report-formats "sonarqube" --ignore-on-exit "all" --exclude-paths ${{inputs.SCAN_EXCLUDE}}
        #if [ -z ${{inputs.SCAN-OUTPUT}} ]; then export output="iac-output.json";  else export output=${{inputs.SCAN-OUTPUT}}; fi
        sed "s/..\/..\/path\///g" sonarqube-results.json > IaC.report    
        

    - name: set sonarqube args
      run: |
          echo "$SCAN_TYPE"
          echo "${SCAN_TYPE//,/.report,}".report
          echo REPORTS_PATHS="${SCAN_TYPE//,/.report,}".report
          echo REPORTS_PATHS="${SCAN_TYPE//,/.report,}".report >> $GITHUB_ENV
      env:
          SCAN_TYPE: ${{inputs.SCAN_TYPE}}
        
    - name: test
      run: |
        echo ${{env.REPORTS_PATHS}}
        echo ${{ github.event.repository.name }}
        
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      with:
        projectBaseDir: .
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        args: >
          -Dsonar.projectKey=${{ github.event.repository.name }}
          -Dsonar.externalIssuesReportPaths=${{env.REPORTS_PATHS}}
          -Dsonar.sources=${{inputs.SCAN_INCLUDE}}
          -Dsonar.exclusions=${{inputs.SCAN_EXCLUDE}}
